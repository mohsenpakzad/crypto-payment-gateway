//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.5

use sea_orm::entity::prelude::*;
use serde::Serialize;

#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, Serialize)]
#[sea_orm(rs_type = "String", db_type = "String(None)")]
pub enum PaymentStatus {
    #[sea_orm(string_value = "WAITING")]
    Waiting,
    #[sea_orm(string_value = "CONFIRMED")]
    Confirmed,
    #[sea_orm(string_value = "VERIFIED")]
    Verified,
    #[sea_orm(string_value = "EXPIRED")]
    Expired,
}

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize)]
#[sea_orm(table_name = "payment")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub status: PaymentStatus,
    pub amount: Decimal,
    pub user_id: i32,
    pub fiat_currency_id: i32,
    pub crypto_currency_id: Option<i32>,
    pub dest_wallet_id: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::crypto_currency::Entity",
        from = "Column::CryptoCurrencyId",
        to = "super::crypto_currency::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    CryptoCurrency,
    #[sea_orm(
        belongs_to = "super::fiat_currency::Entity",
        from = "Column::FiatCurrencyId",
        to = "super::fiat_currency::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    FiatCurrency,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::UserId",
        to = "super::user::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    User,
    #[sea_orm(has_one = "super::user_transaction::Entity")]
    UserTransaction,
    #[sea_orm(
        belongs_to = "super::wallet::Entity",
        from = "Column::DestWalletId",
        to = "super::wallet::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Wallet,
}

impl Related<super::crypto_currency::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CryptoCurrency.def()
    }
}

impl Related<super::fiat_currency::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FiatCurrency.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl Related<super::user_transaction::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserTransaction.def()
    }
}

impl Related<super::wallet::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Wallet.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
