//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.5

use sea_orm::entity::prelude::*;
use serde::Serialize;

#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, Serialize)]
#[sea_orm(rs_type = "String", db_type = "String(None)")]
pub enum UserTransactionType {
    #[sea_orm(string_value = "DEPOSIT")]
    Deposit,
    #[sea_orm(string_value = "WITHDRAWAL")]
    Withdrawal,
}

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize)]
#[sea_orm(table_name = "user_transaction")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub r#type: UserTransactionType,
    pub amount: Decimal,
    pub user_id: i32,
    pub fiat_currency_id: i32,
    pub created_at: DateTime,
    #[sea_orm(unique)]
    pub deposit_payment_id: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::fiat_currency::Entity",
        from = "Column::FiatCurrencyId",
        to = "super::fiat_currency::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    FiatCurrency,
    #[sea_orm(
        belongs_to = "super::payment::Entity",
        from = "Column::DepositPaymentId",
        to = "super::payment::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Payment,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::UserId",
        to = "super::user::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    User,
}

impl Related<super::fiat_currency::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FiatCurrency.def()
    }
}

impl Related<super::payment::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Payment.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
